- if (!file.hasOwnProperty('type')) { file.type = 'file'; }

case file.type
	when 'file'
		div.item.file(
				data-selected='false'
				data-file-id= file.id
				data-mimetype= file.mimeType,
				data-folder-id= file.folder === null ? 'null' : file.folder,
				data-data= JSON.stringify(file))
			div.context-menu
				ul
					li
						p 選択
					li
						p 開く
				ul
					li
						a(href= file.url + '?download', download= file.name)
							i.fa.fa-download
							| ダウンロード
				ul
					li
						i.fa.fa-i-cursor
						p 名前を変更
					li
						i.fa.fa-trash-o
						p 削除
			case file.mimeType
				when 'image/jpeg'
				when 'image/png'
				when 'image/gif'
				when 'image/webp'
				when 'image/tiff'
				when 'image/bmp'
					div.content(style={'background-image': 'url(#{file.url}?mini)'})
						p.name= file.name
				default
					div.content(style={'background-image': 'url(/resources/desktop/images/album/file.svg)'})
						p.name= file.name
	when 'folder'
		div.item.folder(
				data-selected='false'
				data-folder-id= file.id)
			div.context-menu
				ul
					li
						| 選択
					li
						| 開く
				ul
					li
						a(href= file.url + '?download', download= file.name)
							i.fa.fa-download
							| ダウンロード
				ul
					li
						i.fa.fa-i-cursor
						| 名前を変更
					li
						i.fa.fa-trash-o
						| 削除
			div.content
				p.name= file.name
